
Singleton - паттерн проектирования, который позволяет создать сущность в единственном уникальном
экземпляре нужного нам класса, сколько бы экземпляров ни создавалось.

Используется в случаях, когда необходимо уменьшить использование ресурсов.
Таже когда требуется объект в единственном экземпляре в программе.

Примеры:
Подключение к БД
Пул потоков.



1) Simple

Синглтон создается с помощью:
1. Приватный конструктор
2. приватное статическое поле с инициализацией экземпляра класса синглтона
3. публичный статический метод возвращающий экземпляр класса


2) LazySingle

1. Приватный конструктор
2. Приватное статическое поле типа этого класса
3. публичный статический метод возвращающий экземпляр класса.
В этом методе проверяется - был создан этот объект или еще нет.
Если создан, то просто возвращается ссылка на ранее созданный экземпляр.


3) SyncSingle

Реализуется точно так же как и LazySingle, только метод возвращающий экземпляр класса
реализован с synchronized.


4) DoubleCheckSingle

В методе получения экземпляра синглотна реализована двойная проверка с блоком
синхронизации для исключения ошибки создания двух синглотонов разными потоками.


5) UseHolder

Самый удобный вариант реализации синглтона.

Выполняется по следующему принципу:
1. Приватный конструктор
2. Приватный статический вложенный класс, у которого публичное статическое поле,
в котором инициализируется экземпляр внешнего класса.
3. У внешнего класса публичный статический метод, возвращающий поле внутреннего класса,
которое и является экземпляром внешнего класса.

!!! Плюс данного способа в том, что вложенный класс инициализируется только при создании объекта
во время выполнения программы.